package com.mycompany.myapp;


import com.codename1.components.OnOffSwitch;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Button;
import com.codename1.ui.CheckBox;
import com.codename1.ui.Container;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.spinner.Picker;
import com.mycompany.myapp.gui.Form1;
import com.mycompany.myapp.gui.Form2;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        Form1 form1 = new Form1("form1",BoxLayout.y());
          
          form1.getBtnValider().addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent arg0) {
              Form2 form2 = new Form2("Form 2",BoxLayout.y());
              form2.setLbNom(new Label("Nom :"+form1.getTfNom().getText()));
               form2.setLbPrenom(new Label("Prenom :"+form1.getTfPrenom().getText()));
              form2.setLbPassword(new Label("Password :"+ form1.getTfPassword().getText()));
                form2.setlDate(new Label("Date :"+ form1.getDate().getDate().toString()));
              form2.setlGender(new Label("Gender :"));
               if(form1.getOnOff().isValue()){
                   form2.getlGender().setText("Gender : Homme");
               }
               else{
                    form2.getlGender().setText("Gender : femme");
             
               }
             Label lHobis = new Label();
             String ch = "Hobis : ";
             if(form1.getChFoot().isSelected()) ch+="foot";
             if(form1.getChTennis().isSelected()) ch+="tennis";
             if(form1.getChLecture().isSelected())ch+="Lecture";
             if(form1.getChNatation().isSelected()) ch+="Natation";
           lHobis.setText(ch);
           form2.add(form2.getLbNom());
            form2.add(form2.getLbPrenom());
                 form2.add(form2.getLbPassword());
                      form2.add(form2.getlDate()); 
                      form2.add(form2.getlGender());
                       form2.add(lHobis);
                      form2.show();
                      
             
            }
              
          });
          
          
                  
          
          
          
          
          
          
          
          
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
